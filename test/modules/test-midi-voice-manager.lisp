(in-package :cl-synthesizer-test)

;;
;; voice tests
;;

(define-test test-voice-manager-voice-2 ()
	     (let ((v (make-instance 'cl-synthesizer-modules-midi-interface::voice)))
	       (multiple-value-bind (current-voice-note voice-note-stack-size)
		   (cl-synthesizer-modules-midi-interface::voice-push-note v 1)
		 (assert-equal 1 voice-note-stack-size)
		 (assert-equal 1 current-voice-note)
		 (assert-true (cl-synthesizer-modules-midi-interface::voice-is-note v 1))
		 (assert-nil (cl-synthesizer-modules-midi-interface::voice-is-note v 99)))))

(define-test test-voice-manager-voice-3 ()
	     (let ((v (make-instance 'cl-synthesizer-modules-midi-interface::voice)))
	       (multiple-value-bind (current-voice-note voice-note-stack-size)
		   (cl-synthesizer-modules-midi-interface::voice-push-note v 1)
		 (assert-equal 1 voice-note-stack-size)
		 (assert-equal 1 current-voice-note))
	       (multiple-value-bind (current-voice-note voice-note-stack-size)
		   (cl-synthesizer-modules-midi-interface::voice-push-note v 2)
;;		 (assert-equal :VOICE-NOTE-OVERWRITE voice-note-stack-size)
		 (assert-true (< 1 voice-note-stack-size))
		 (assert-equal 2 current-voice-note))))

(define-test test-voice-manager-voice-4 ()
	     (let ((v (make-instance 'cl-synthesizer-modules-midi-interface::voice)))
	       (assert-equal 1 (cl-synthesizer-modules-midi-interface::voice-push-note v 1))
	       (assert-true (< 1 (cl-synthesizer-modules-midi-interface::voice-push-note v 2)))
	       (assert-equal 1 (cl-synthesizer-modules-midi-interface::voice-remove-note v 2))))

(define-test test-voice-manager-voice-5 ()
	     (let ((v (make-instance 'cl-synthesizer-modules-midi-interface::voice)))
	       (assert-equal 1 (cl-synthesizer-modules-midi-interface::voice-push-note v 1))
	       (assert-true (< 1 (cl-synthesizer-modules-midi-interface::voice-push-note v 2)))
	       (assert-equal 2 (cl-synthesizer-modules-midi-interface::voice-remove-note v 1))
	       (assert-nil (cl-synthesizer-modules-midi-interface::voice-remove-note v 2))
	       (assert-nil (cl-synthesizer-modules-midi-interface::voice-remove-note v 2))))

(define-test test-voice-manager-voice-6 ()
	     (let ((v (make-instance 'cl-synthesizer-modules-midi-interface::voice)))
	       (assert-equal 1 (cl-synthesizer-modules-midi-interface::voice-push-note v 1))
	       (assert-true (< 1 (cl-synthesizer-modules-midi-interface::voice-push-note v 2)))
	       (assert-equal 2 (cl-synthesizer-modules-midi-interface::voice-remove-note v 3))))

(define-test test-voice-manager-voice-7 ()
	     (let ((v (make-instance 'cl-synthesizer-modules-midi-interface::voice)))
	       (assert-equal 1 (cl-synthesizer-modules-midi-interface::voice-push-note v 1))
	       (assert-true (< 1 (cl-synthesizer-modules-midi-interface::voice-push-note v 2)))
	       (multiple-value-bind (current-voice-note voice-note-stack-size)
		   (cl-synthesizer-modules-midi-interface::voice-push-note v 2)
		 (assert-true (< 1 voice-note-stack-size))
		 (assert-equal 2 current-voice-note))
	       (assert-equal 1 (cl-synthesizer-modules-midi-interface::voice-remove-note v 2))
	       (assert-nil (cl-synthesizer-modules-midi-interface::voice-remove-note v 1))))

(define-test test-voice-manager-voice-8 ()
	     (let ((v (make-instance 'cl-synthesizer-modules-midi-interface::voice)))
	       (multiple-value-bind (current-voice-note voice-note-stack-size)
		   (cl-synthesizer-modules-midi-interface::voice-push-note v 1)
		 (assert-equal 1 current-voice-note))
	       (multiple-value-bind (current-voice-note voice-note-stack-size)
		   (cl-synthesizer-modules-midi-interface::voice-push-note v 2)
		 (assert-true (< 1 voice-note-stack-size))
		 (assert-equal 2 current-voice-note))
	       (assert-equal 1 (cl-synthesizer-modules-midi-interface::voice-remove-note v 2))
	       (multiple-value-bind (current-voice-note voice-note-stack-size)
		   (cl-synthesizer-modules-midi-interface::voice-push-note v 3)
		 (assert-true (< 1 voice-note-stack-size))
		 (assert-equal 3 current-voice-note))))

(define-test test-voice-manager-voice-9 ()
	     (let ((v (make-instance 'cl-synthesizer-modules-midi-interface::voice)))
	       (multiple-value-bind (current-voice-note voice-note-stack-size)
		   (cl-synthesizer-modules-midi-interface::voice-push-note v 1)
		 (assert-equal 1 voice-note-stack-size))
	       (multiple-value-bind (current-voice-note voice-note-stack-size)
		   (cl-synthesizer-modules-midi-interface::voice-push-note v 2)
		 (assert-true (< 1 voice-note-stack-size))
		 (assert-equal 2 current-voice-note))
	       (assert-equal 1 (cl-synthesizer-modules-midi-interface::voice-remove-note v 2))
	       (multiple-value-bind (current-voice-note voice-note-stack-size)
		   (cl-synthesizer-modules-midi-interface::voice-push-note v 1)
		 (assert-equal 1 voice-note-stack-size)
		 (assert-equal 1 current-voice-note))))

(define-test test-voice-manager-voice-10 ()
	     (let ((v (make-instance 'cl-synthesizer-modules-midi-interface::voice)))
	       (assert-equal 1 (cl-synthesizer-modules-midi-interface::voice-push-note v 1))
	       (multiple-value-bind (current-voice-note voice-note-stack-size)
		   (cl-synthesizer-modules-midi-interface::voice-push-note v 1)
		 (assert-equal 1 voice-note-stack-size)
		 (assert-equal 1 current-voice-note))
	       (assert-nil (cl-synthesizer-modules-midi-interface::voice-remove-note v 1))))

;;
;; voice-manager tests
;;

(define-test test-voice-manager-mgr-0 ()
	     (let ((mgr (make-instance 'cl-synthesizer-modules-midi-interface::voice-manager :voice-count 1)))
	       (cl-synthesizer-modules-midi-interface::voice-manager-push-note mgr 11)
	       (assert-equal 0 (cl-synthesizer-modules-midi-interface::voice-manager-find-voice-index-by-note mgr 11))))

(define-test test-voice-manager-mgr-2 ()
	     (let ((mgr (make-instance 'cl-synthesizer-modules-midi-interface::voice-manager :voice-count 1)))
	       (multiple-value-bind (voice-number current-voice-note voice-note-stack-size)
		   (cl-synthesizer-modules-midi-interface::voice-manager-push-note mgr 11)
		 (assert-equal 0 voice-number)
		 (assert-equal 1 voice-note-stack-size)
		 (assert-equal 11 current-voice-note))))

(define-test test-voice-manager-mgr-3 ()
	     (let ((mgr (make-instance 'cl-synthesizer-modules-midi-interface::voice-manager :voice-count 1)))
	       (multiple-value-bind (voice-number current-voice-note voice-note-stack-size)
		   (cl-synthesizer-modules-midi-interface::voice-manager-push-note mgr 11)
		 (assert-equal 0 voice-number)
		 (assert-equal 1 voice-note-stack-size)
		 (assert-equal 11 current-voice-note))
	       (multiple-value-bind (voice-number current-voice-note voice-note-stack-size)
		   (cl-synthesizer-modules-midi-interface::voice-manager-push-note mgr 22)
		 (assert-equal 22 current-voice-note))))

(define-test test-voice-manager-mgr-4 ()
	     (let ((mgr (make-instance 'cl-synthesizer-modules-midi-interface::voice-manager :voice-count 1)))
	       (multiple-value-bind (voice-number current-voice-note voice-note-stack-size)
		   (cl-synthesizer-modules-midi-interface::voice-manager-push-note mgr 11)
		 (assert-equal 0 voice-number)
		 (assert-equal 1 voice-note-stack-size)
		 (assert-equal 11 current-voice-note))
	       (multiple-value-bind (voice-number current-voice-note voice-note-stack-size)
		   (cl-synthesizer-modules-midi-interface::voice-manager-push-note mgr 22)
		 (assert-equal 0 voice-number)
		 (assert-true (< 1 voice-note-stack-size))
		 (assert-equal 22 current-voice-note))
	       (multiple-value-bind (voice-number current-voice-note)
		   (cl-synthesizer-modules-midi-interface::voice-manager-remove-note mgr 22)
		 (assert-equal 0 voice-number)
		 (assert-equal 11 current-voice-note))))

(define-test test-voice-manager-mgr-5 ()
	     (let ((mgr (make-instance 'cl-synthesizer-modules-midi-interface::voice-manager :voice-count 1)))
	       (multiple-value-bind (voice-number current-voice-note voice-note-stack-size)
		   (cl-synthesizer-modules-midi-interface::voice-manager-push-note mgr 11)
		 (assert-equal 0 voice-number)
		 (assert-equal 1 voice-note-stack-size))
	       (multiple-value-bind (voice-number current-voice-note voice-note-stack-size)
		   (cl-synthesizer-modules-midi-interface::voice-manager-push-note mgr 22)
		 (assert-equal 0 voice-number)
		 (assert-true (< 1 voice-note-stack-size)))
	       (multiple-value-bind (voice-number current-voice-note voice-note-stack-size)
		   (cl-synthesizer-modules-midi-interface::voice-manager-push-note mgr 22)
		 (assert-equal 0 voice-number)
		 (assert-equal 22 current-voice-note)
		 (assert-true (< 1 voice-note-stack-size)))
	       (multiple-value-bind (voice-number current-voice-note)
		   (cl-synthesizer-modules-midi-interface::voice-manager-remove-note mgr 22)
		 (assert-equal 0 voice-number)
		 (assert-equal 11 current-voice-note))))

(define-test test-voice-manager-mgr-6 ()
	     (let ((mgr (make-instance 'cl-synthesizer-modules-midi-interface::voice-manager :voice-count 2)))
	       (multiple-value-bind (voice-number current-voice-note voice-note-stack-size)
		   (cl-synthesizer-modules-midi-interface::voice-manager-push-note mgr 11)
		 (assert-equal 0 voice-number)
		 (assert-equal 1 voice-note-stack-size)
		 (assert-equal 11 current-voice-note))
	       (multiple-value-bind (voice-number current-voice-note voice-note-stack-size)
		   (cl-synthesizer-modules-midi-interface::voice-manager-push-note mgr 22)
		 (assert-equal 1 voice-number)
		 (assert-equal 1 voice-note-stack-size)
		 (assert-equal 22 current-voice-note))))

(define-test test-voice-manager-mgr-7 ()
	     (let ((mgr (make-instance 'cl-synthesizer-modules-midi-interface::voice-manager :voice-count 2)))
	       (multiple-value-bind (voice-number current-voice-note voice-note-stack-size)
		   (cl-synthesizer-modules-midi-interface::voice-manager-push-note mgr 11)
		 (assert-equal 0 voice-number)
		 (assert-equal 1 voice-note-stack-size)
		 (assert-equal 11 current-voice-note))
	       (multiple-value-bind (voice-number current-voice-note voice-note-stack-size)
		   (cl-synthesizer-modules-midi-interface::voice-manager-push-note mgr 22)
		 (assert-equal 1 voice-number)
		 (assert-equal 1 voice-note-stack-size)
		 (assert-equal 22 current-voice-note))
	       (multiple-value-bind (voice-number current-voice-note voice-note-stack-size)
		   (cl-synthesizer-modules-midi-interface::voice-manager-push-note mgr 33)
		 (assert-equal 0 voice-number)
		 (assert-equal 33 current-voice-note)
		 (assert-true (< 1 voice-note-stack-size)))))

(define-test test-voice-manager-mgr-8 ()
	     (let ((mgr (make-instance 'cl-synthesizer-modules-midi-interface::voice-manager :voice-count 2)))
	       (multiple-value-bind (voice-number current-voice-note voice-note-stack-size)
		   (cl-synthesizer-modules-midi-interface::voice-manager-push-note mgr 11)
		 (assert-equal 0 voice-number)
		 (assert-equal 11 current-voice-note)
		 (assert-equal 1 voice-note-stack-size))
	       (multiple-value-bind (voice-number current-voice-note voice-note-stack-size)
		   (cl-synthesizer-modules-midi-interface::voice-manager-push-note mgr 22)
		 (assert-equal 1 voice-number)
		 (assert-equal 22 current-voice-note)
		 (assert-equal 1 voice-note-stack-size))
	       (multiple-value-bind (voice-number current-voice-note voice-note-stack-size)
		   (cl-synthesizer-modules-midi-interface::voice-manager-push-note mgr 33)
		 (assert-equal 0 voice-number)
		 (assert-equal 33 current-voice-note)
		 (assert-true (< 1 voice-note-stack-size)))
	       (multiple-value-bind (voice-number current-voice-note voice-note-stack-size)
		   (cl-synthesizer-modules-midi-interface::voice-manager-push-note mgr 44)
		 (assert-equal 1 voice-number)
		 (assert-equal 44 current-voice-note)
		 (assert-true (< 1 voice-note-stack-size)))))

(define-test test-voice-manager-mgr-9 ()
	     (let ((mgr (make-instance 'cl-synthesizer-modules-midi-interface::voice-manager :voice-count 2)))
	       (multiple-value-bind (voice-number current-voice-note voice-note-stack-size)
		   (cl-synthesizer-modules-midi-interface::voice-manager-push-note mgr 11) ;; 0 -> 11
		 (assert-equal 0 voice-number)
		 (assert-equal 11 current-voice-note)
		 (assert-equal 1 voice-note-stack-size))
	       (multiple-value-bind (voice-number current-voice-note voice-note-stack-size)
		   (cl-synthesizer-modules-midi-interface::voice-manager-push-note mgr 22) ;; 1 -> 22
		 (assert-equal 1 voice-number)
		 (assert-equal 22 current-voice-note)
		 (assert-equal 1 voice-note-stack-size))
	       (multiple-value-bind (voice-number current-voice-note voice-note-stack-size)
		   (cl-synthesizer-modules-midi-interface::voice-manager-push-note mgr 33) ;; 0 -> 33
		 (assert-equal 0 voice-number)
		 (assert-equal 33 current-voice-note)
		 (assert-true (< 1 voice-note-stack-size)))
	       (multiple-value-bind (voice-number current-voice-note)
		   (cl-synthesizer-modules-midi-interface::voice-manager-remove-note mgr 33) ;; 0 -> 11
		 (assert-equal 0 voice-number)
		 (assert-equal 11 current-voice-note))
	       (multiple-value-bind (voice-number current-voice-note voice-note-stack-size)
		   (cl-synthesizer-modules-midi-interface::voice-manager-push-note mgr 44) ;; 1 -> 44
		 (assert-equal 44 current-voice-note))))

(define-test test-voice-manager-mgr-10 ()
	     (let ((mgr (make-instance 'cl-synthesizer-modules-midi-interface::voice-manager :voice-count 2)))
	       (multiple-value-bind (voice-number current-voice-note voice-note-stack-size)
		   (cl-synthesizer-modules-midi-interface::voice-manager-push-note mgr 11) ;; 0 -> 11
		 (assert-equal 0 voice-number)
		 (assert-equal 11 current-voice-note)
		 (assert-equal 1 voice-note-stack-size))
	       (multiple-value-bind (voice-number current-voice-note voice-note-stack-size)
		   (cl-synthesizer-modules-midi-interface::voice-manager-push-note mgr 22) ;; 1 -> 22
		 (assert-equal 1 voice-number)
		 (assert-equal 22 current-voice-note)
		 (assert-equal 1 voice-note-stack-size))
	       (multiple-value-bind (voice-number current-voice-note voice-note-stack-size)
		   (cl-synthesizer-modules-midi-interface::voice-manager-push-note mgr 33) ;; 0 -> 33
		 (assert-equal 0 voice-number)
		 (assert-equal 33 current-voice-note)
		 (assert-true (< 1 voice-note-stack-size)))
	       (multiple-value-bind (voice-number current-voice-note voice-note-stack-size)
		   (cl-synthesizer-modules-midi-interface::voice-manager-push-note mgr 44) ;; 1 -> 44
		 (assert-equal 1 voice-number)
		 (assert-equal 44 current-voice-note)
		 (assert-true (< 1 voice-note-stack-size)))
	       (multiple-value-bind (voice-number current-voice-note voice-note-stack-size)
		   (cl-synthesizer-modules-midi-interface::voice-manager-push-note mgr 55) ;; 0 -> 55
		 (assert-equal 0 voice-number)
		 (assert-equal 55 current-voice-note)
		 (assert-true (< 1 voice-note-stack-size)))
	       (multiple-value-bind (voice-number current-voice-note voice-note-stack-size)
		   (cl-synthesizer-modules-midi-interface::voice-manager-push-note mgr 66) ;; 1 -> 66
		 (assert-equal 1 voice-number)
		 (assert-equal 66 current-voice-note)
		 (assert-true (< 1 voice-note-stack-size)))
	       (multiple-value-bind (voice-number current-voice-note)
		   (cl-synthesizer-modules-midi-interface::voice-manager-remove-note mgr 66)
		 (assert-equal 1 voice-number)
		 (assert-equal 44 current-voice-note))
	       (multiple-value-bind (voice-number current-voice-note voice-note-stack-size)
		   (cl-synthesizer-modules-midi-interface::voice-manager-push-note mgr 77) ;; 0 -> 77
		 (assert-equal 0 voice-number)
		 (assert-equal 77 current-voice-note)
		 (assert-true (< 1 voice-note-stack-size)))))

(define-test test-voice-manager-mgr-11 ()
	     (let ((mgr (make-instance 'cl-synthesizer-modules-midi-interface::voice-manager :voice-count 1)))
	       (cl-synthesizer-modules-midi-interface::voice-manager-push-note mgr 11) ;; 0 -> 11
	       (multiple-value-bind (voice-number voice-note-stack-size)
		   (cl-synthesizer-modules-midi-interface::voice-manager-remove-note mgr 11)
		 (assert-equal 0 voice-number)
		 (assert-nil voice-note-stack-size))
	       (multiple-value-bind (voice-number voice-note-stack-size)
		   (cl-synthesizer-modules-midi-interface::voice-manager-remove-note mgr 11)
		 (assert-nil voice-number)
		 (assert-nil voice-note-stack-size))))

