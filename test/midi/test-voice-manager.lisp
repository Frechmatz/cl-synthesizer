(in-package :cl-synthesizer-test)

;;
;; voice-manager tests
;;

(define-test test-voice-manager-mgr-0 ()
	     (let ((mgr (make-instance 'cl-synthesizer-midi-voice-manager::voice-manager :voice-count 1)))
	       (cl-synthesizer-midi-voice-manager:push-note mgr 11)
	       (assert-equal 0 (cl-synthesizer-midi-voice-manager::voice-manager-find-voice-index-by-note mgr 11))))

(define-test test-voice-manager-mgr-2 ()
	     (let ((mgr (make-instance 'cl-synthesizer-midi-voice-manager::voice-manager :voice-count 1)))
	       (multiple-value-bind (voice-number current-voice-note voice-note-stack-size)
		   (cl-synthesizer-midi-voice-manager:push-note mgr 11)
		 (assert-equal 0 voice-number)
		 (assert-equal 1 voice-note-stack-size)
		 (assert-equal 11 current-voice-note))))

(define-test test-voice-manager-mgr-3 ()
	     (let ((mgr (make-instance 'cl-synthesizer-midi-voice-manager::voice-manager :voice-count 1)))
	       (multiple-value-bind (voice-number current-voice-note voice-note-stack-size)
		   (cl-synthesizer-midi-voice-manager:push-note mgr 11)
		 (assert-equal 0 voice-number)
		 (assert-equal 1 voice-note-stack-size)
		 (assert-equal 11 current-voice-note))
	       (multiple-value-bind (voice-number current-voice-note voice-note-stack-size)
		   (cl-synthesizer-midi-voice-manager:push-note mgr 22)
		 (assert-equal 22 current-voice-note))))

(define-test test-voice-manager-mgr-4 ()
	     (let ((mgr (make-instance 'cl-synthesizer-midi-voice-manager::voice-manager :voice-count 1)))
	       (multiple-value-bind (voice-number current-voice-note voice-note-stack-size)
		   (cl-synthesizer-midi-voice-manager:push-note mgr 11)
		 (assert-equal 0 voice-number)
		 (assert-equal 1 voice-note-stack-size)
		 (assert-equal 11 current-voice-note))
	       (multiple-value-bind (voice-number current-voice-note voice-note-stack-size)
		   (cl-synthesizer-midi-voice-manager:push-note mgr 22)
		 (assert-equal 0 voice-number)
		 (assert-true (< 1 voice-note-stack-size))
		 (assert-equal 22 current-voice-note))
	       (multiple-value-bind (voice-number current-voice-note)
		   (cl-synthesizer-midi-voice-manager:remove-note mgr 22)
		 (assert-equal 0 voice-number)
		 (assert-equal 11 current-voice-note))))

(define-test test-voice-manager-mgr-5 ()
	     (let ((mgr (make-instance 'cl-synthesizer-midi-voice-manager::voice-manager :voice-count 1)))
	       (multiple-value-bind (voice-number current-voice-note voice-note-stack-size)
		   (cl-synthesizer-midi-voice-manager:push-note mgr 11)
		 (assert-equal 0 voice-number)
		 (assert-equal 1 voice-note-stack-size))
	       (multiple-value-bind (voice-number current-voice-note voice-note-stack-size)
		   (cl-synthesizer-midi-voice-manager:push-note mgr 22)
		 (assert-equal 0 voice-number)
		 (assert-true (< 1 voice-note-stack-size)))
	       (multiple-value-bind (voice-number current-voice-note voice-note-stack-size)
		   (cl-synthesizer-midi-voice-manager:push-note mgr 22)
		 (assert-equal 0 voice-number)
		 (assert-equal 22 current-voice-note)
		 (assert-true (< 1 voice-note-stack-size)))
	       (multiple-value-bind (voice-number current-voice-note)
		   (cl-synthesizer-midi-voice-manager:remove-note mgr 22)
		 (assert-equal 0 voice-number)
		 (assert-equal 11 current-voice-note))))

(define-test test-voice-manager-mgr-6 ()
	     (let ((mgr (make-instance 'cl-synthesizer-midi-voice-manager::voice-manager :voice-count 2)))
	       (multiple-value-bind (voice-number current-voice-note voice-note-stack-size)
		   (cl-synthesizer-midi-voice-manager:push-note mgr 11)
		 (assert-equal 0 voice-number)
		 (assert-equal 1 voice-note-stack-size)
		 (assert-equal 11 current-voice-note))
	       (multiple-value-bind (voice-number current-voice-note voice-note-stack-size)
		   (cl-synthesizer-midi-voice-manager:push-note mgr 22)
		 (assert-equal 1 voice-number)
		 (assert-equal 1 voice-note-stack-size)
		 (assert-equal 22 current-voice-note))))

(define-test test-voice-manager-mgr-7 ()
	     (let ((mgr (make-instance 'cl-synthesizer-midi-voice-manager::voice-manager :voice-count 2)))
	       (multiple-value-bind (voice-number current-voice-note voice-note-stack-size)
		   (cl-synthesizer-midi-voice-manager:push-note mgr 11)
		 (assert-equal 0 voice-number)
		 (assert-equal 1 voice-note-stack-size)
		 (assert-equal 11 current-voice-note))
	       (multiple-value-bind (voice-number current-voice-note voice-note-stack-size)
		   (cl-synthesizer-midi-voice-manager:push-note mgr 22)
		 (assert-equal 1 voice-number)
		 (assert-equal 1 voice-note-stack-size)
		 (assert-equal 22 current-voice-note))
	       (multiple-value-bind (voice-number current-voice-note voice-note-stack-size)
		   (cl-synthesizer-midi-voice-manager:push-note mgr 33)
		 (assert-equal 0 voice-number)
		 (assert-equal 33 current-voice-note)
		 (assert-true (< 1 voice-note-stack-size)))))

(define-test test-voice-manager-mgr-8 ()
	     (let ((mgr (make-instance 'cl-synthesizer-midi-voice-manager::voice-manager :voice-count 2)))
	       (multiple-value-bind (voice-number current-voice-note voice-note-stack-size)
		   (cl-synthesizer-midi-voice-manager:push-note mgr 11)
		 (assert-equal 0 voice-number)
		 (assert-equal 11 current-voice-note)
		 (assert-equal 1 voice-note-stack-size))
	       (multiple-value-bind (voice-number current-voice-note voice-note-stack-size)
		   (cl-synthesizer-midi-voice-manager:push-note mgr 22)
		 (assert-equal 1 voice-number)
		 (assert-equal 22 current-voice-note)
		 (assert-equal 1 voice-note-stack-size))
	       (multiple-value-bind (voice-number current-voice-note voice-note-stack-size)
		   (cl-synthesizer-midi-voice-manager:push-note mgr 33)
		 (assert-equal 0 voice-number)
		 (assert-equal 33 current-voice-note)
		 (assert-true (< 1 voice-note-stack-size)))
	       (multiple-value-bind (voice-number current-voice-note voice-note-stack-size)
		   (cl-synthesizer-midi-voice-manager:push-note mgr 44)
		 (assert-equal 1 voice-number)
		 (assert-equal 44 current-voice-note)
		 (assert-true (< 1 voice-note-stack-size)))))

(define-test test-voice-manager-mgr-9 ()
	     (let ((mgr (make-instance 'cl-synthesizer-midi-voice-manager::voice-manager :voice-count 2)))
	       (multiple-value-bind (voice-number current-voice-note voice-note-stack-size)
		   (cl-synthesizer-midi-voice-manager:push-note mgr 11) ;; 0 -> 11
		 (assert-equal 0 voice-number)
		 (assert-equal 11 current-voice-note)
		 (assert-equal 1 voice-note-stack-size))
	       (multiple-value-bind (voice-number current-voice-note voice-note-stack-size)
		   (cl-synthesizer-midi-voice-manager:push-note mgr 22) ;; 1 -> 22
		 (assert-equal 1 voice-number)
		 (assert-equal 22 current-voice-note)
		 (assert-equal 1 voice-note-stack-size))
	       (multiple-value-bind (voice-number current-voice-note voice-note-stack-size)
		   (cl-synthesizer-midi-voice-manager:push-note mgr 33) ;; 0 -> 33
		 (assert-equal 0 voice-number)
		 (assert-equal 33 current-voice-note)
		 (assert-true (< 1 voice-note-stack-size)))
	       (multiple-value-bind (voice-number current-voice-note)
		   (cl-synthesizer-midi-voice-manager:remove-note mgr 33) ;; 0 -> 11
		 (assert-equal 0 voice-number)
		 (assert-equal 11 current-voice-note))
	       (multiple-value-bind (voice-number current-voice-note voice-note-stack-size)
		   (cl-synthesizer-midi-voice-manager:push-note mgr 44) ;; 1 -> 44
		 (assert-equal 44 current-voice-note))))

(define-test test-voice-manager-mgr-10 ()
	     (let ((mgr (make-instance 'cl-synthesizer-midi-voice-manager::voice-manager :voice-count 2)))
	       (multiple-value-bind (voice-number current-voice-note voice-note-stack-size)
		   (cl-synthesizer-midi-voice-manager:push-note mgr 11) ;; 0 -> 11
		 (assert-equal 0 voice-number)
		 (assert-equal 11 current-voice-note)
		 (assert-equal 1 voice-note-stack-size))
	       (multiple-value-bind (voice-number current-voice-note voice-note-stack-size)
		   (cl-synthesizer-midi-voice-manager:push-note mgr 22) ;; 1 -> 22
		 (assert-equal 1 voice-number)
		 (assert-equal 22 current-voice-note)
		 (assert-equal 1 voice-note-stack-size))
	       (multiple-value-bind (voice-number current-voice-note voice-note-stack-size)
		   (cl-synthesizer-midi-voice-manager:push-note mgr 33) ;; 0 -> 33
		 (assert-equal 0 voice-number)
		 (assert-equal 33 current-voice-note)
		 (assert-true (< 1 voice-note-stack-size)))
	       (multiple-value-bind (voice-number current-voice-note voice-note-stack-size)
		   (cl-synthesizer-midi-voice-manager:push-note mgr 44) ;; 1 -> 44
		 (assert-equal 1 voice-number)
		 (assert-equal 44 current-voice-note)
		 (assert-true (< 1 voice-note-stack-size)))
	       (multiple-value-bind (voice-number current-voice-note voice-note-stack-size)
		   (cl-synthesizer-midi-voice-manager:push-note mgr 55) ;; 0 -> 55
		 (assert-equal 0 voice-number)
		 (assert-equal 55 current-voice-note)
		 (assert-true (< 1 voice-note-stack-size)))
	       (multiple-value-bind (voice-number current-voice-note voice-note-stack-size)
		   (cl-synthesizer-midi-voice-manager:push-note mgr 66) ;; 1 -> 66
		 (assert-equal 1 voice-number)
		 (assert-equal 66 current-voice-note)
		 (assert-true (< 1 voice-note-stack-size)))
	       (multiple-value-bind (voice-number current-voice-note)
		   (cl-synthesizer-midi-voice-manager:remove-note mgr 66)
		 (assert-equal 1 voice-number)
		 (assert-equal 44 current-voice-note))
	       (multiple-value-bind (voice-number current-voice-note voice-note-stack-size)
		   (cl-synthesizer-midi-voice-manager:push-note mgr 77) ;; 0 -> 77
		 (assert-equal 0 voice-number)
		 (assert-equal 77 current-voice-note)
		 (assert-true (< 1 voice-note-stack-size)))))

(define-test test-voice-manager-mgr-11 ()
	     (let ((mgr (make-instance 'cl-synthesizer-midi-voice-manager::voice-manager :voice-count 1)))
	       (cl-synthesizer-midi-voice-manager:push-note mgr 11) ;; 0 -> 11
	       (multiple-value-bind (voice-number voice-note-stack-size)
		   (cl-synthesizer-midi-voice-manager:remove-note mgr 11)
		 (assert-equal 0 voice-number)
		 (assert-nil voice-note-stack-size))
	       (multiple-value-bind (voice-number voice-note-stack-size)
		   (cl-synthesizer-midi-voice-manager:remove-note mgr 11)
		 (assert-nil voice-number)
		 (assert-nil voice-note-stack-size))))

