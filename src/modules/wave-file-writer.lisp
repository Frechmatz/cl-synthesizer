(in-package :cl-synthesizer-modules)

;; todo: n-channel writer (generate with macro)


(defun wave-writer-float-to-int16 (value)
  (if (> value 1.0)
      (break))
  (if (< value -1.0)
      (break))
  (let ((i (round (* 32000 value))))
    i))

(defun two-channel-wave-file-writer (environment &key (filename "sound.wav"))
  "Writes inputs into a Wave file and mirrors inputs to outputs via out-<n>"
  (declare (optimize (debug 3) (speed 0) (space 0)))
  (declare (ignore environment))
  ;; (break)
  (let ((frames nil) (output-channel-1 nil) (output-channel-2 nil))
    (list
     :inputs (lambda () (list :channel-1 :channel-2)) 
     :outputs (lambda () (list :out-1 :out-2))
     :get-output (lambda (output)
		   (cond 
		     ((eq :out-1 output)
		      output-channel-1)
		     ((eq :out-2 output)
		      output-channel-2)
		     (t (error (format nil "Unknown output ~a requested from two-channel-wave-file-writer" output)))))
     :update (lambda (&key channel-1 channel-2)
	       (if (not channel-1)
		   (error "Channel-1 must not be nil"))
	       (if (not channel-2)
		   (error "Channel-2 must not be nil"))
	       (push (wave-writer-float-to-int16 channel-1) frames)
	       (push (wave-writer-float-to-int16 channel-2) frames)
	       (setf output-channel-1 channel-1)
	       (setf output-channel-2 channel-2))
     :shutdown (lambda ()
		 (let ((wave (cl-wave:open-wave filename :direction :output)))
		   (cl-wave:set-num-channels wave 2)
		   (cl-wave:set-frames wave (nreverse frames))
		   (cl-wave:close-wave wave)
		   (setf frames nil))))))

(defun one-channel-wave-file-writer (environment &key (filename "sound.wav"))
  (declare (optimize (debug 3) (speed 0) (space 0)))
  (declare (ignore environment))
  (let ((frames nil) (output-channel-1 nil))
      (list
       :inputs (lambda () (list :channel-1)) 
       :outputs (lambda () (list :out-1))
       :get-output (lambda (output)
		     (cond 
		       ((eq :out-1 output)
			output-channel-1)
		       (t (error (format nil "Unknown output ~a requested from one-channel-wave-file-writer" output)))))
       :update (lambda (&key channel-1)
		 (if (not channel-1)
		     (error "Channel-1 must not be nil"))
		 (push (wave-writer-float-to-int16 channel-1) frames)
		 (setf output-channel-1 channel-1))
       :shutdown (lambda ()
		   (let ((wave (cl-wave:open-wave filename :direction :output)))
		     (cl-wave:set-num-channels wave 1)
		     (cl-wave:set-frames wave (nreverse frames))
		     (cl-wave:close-wave wave)
		     (setf frames nil))))))
